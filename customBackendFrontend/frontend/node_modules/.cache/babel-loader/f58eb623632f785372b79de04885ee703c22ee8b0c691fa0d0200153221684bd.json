{"ast":null,"code":"import axios from \"axios\";\nconst AUTH_BASE_URL = \"http://localhost:8080/auth/\";\nexport const registerApi = register => axios.post(AUTH_BASE_URL + 'register', register);\nexport const loginApi = (na, password) => axios.post(AUTH_BASE_URL + 'login', {\n  username,\n  password\n});\nexport const storeToken = token => localStorage.setItem(\"token\", token);\nexport const getToken = () => localStorage.getItem(\"token\");\nexport const SavedLoggedInUSer = (username, role) => {\n  sessionStorage.setItem(\"authenticatedUser\", username);\n  sessionStorage.setItem(\"role\", role);\n};\n_c = SavedLoggedInUSer;\nexport const isUserLoggedIn = () => {\n  const username = sessionStorage.getItem(\"authenticatedUser\");\n  if (username == null) return false;else return true;\n};\nexport const getUsername = () => {\n  const username = sessionStorage.getItem(\"authenticatedUser\");\n  return username;\n};\nexport const logOut = () => {\n  localStorage.clear();\n  sessionStorage.clear();\n};\nexport const isAdmin = () => {\n  let role = sessionStorage.getItem(\"role\");\n  if (role != null && role == \"ROLE_ADMIN\") return true;else return false;\n};\nvar _c;\n$RefreshReg$(_c, \"SavedLoggedInUSer\");","map":{"version":3,"names":["axios","AUTH_BASE_URL","registerApi","register","post","loginApi","na","password","username","storeToken","token","localStorage","setItem","getToken","getItem","SavedLoggedInUSer","role","sessionStorage","_c","isUserLoggedIn","getUsername","logOut","clear","isAdmin","$RefreshReg$"],"sources":["/home/relax/Desktop/practice/practiceReact/test01/first/src/services/AuthService.js"],"sourcesContent":["import axios from \"axios\";\n\n\nconst AUTH_BASE_URL = \"http://localhost:8080/auth/\"\n\n\nexport const registerApi = (register) => axios.post(AUTH_BASE_URL + 'register', register);\n\nexport const loginApi = (na, password) => axios.post(AUTH_BASE_URL + 'login', { username, password });\n\n\nexport const storeToken = (token) => localStorage.setItem(\"token\", token);\n\n\nexport const getToken = () => localStorage.getItem(\"token\");\n\nexport const SavedLoggedInUSer = (username, role) => {\n    sessionStorage.setItem(\"authenticatedUser\", username);\n    sessionStorage.setItem(\"role\", role);\n}\n\n\nexport const isUserLoggedIn = () => {\n    const username = sessionStorage.getItem(\"authenticatedUser\");\n    if (username == null) return false;\n    else return true;\n}\n\n\nexport const getUsername = () => {\n    const username = sessionStorage.getItem(\"authenticatedUser\");\n    return username;\n}\n\nexport const logOut = () => {\n\n\n    localStorage.clear();\n    sessionStorage.clear();\n\n}\n\n\nexport const isAdmin = () => {\n\n\n    let role = sessionStorage.getItem(\"role\");\n\n    if (role != null && role == \"ROLE_ADMIN\") return true;\n    else return false;\n\n\n\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,MAAMC,aAAa,GAAG,6BAA6B;AAGnD,OAAO,MAAMC,WAAW,GAAIC,QAAQ,IAAKH,KAAK,CAACI,IAAI,CAACH,aAAa,GAAG,UAAU,EAAEE,QAAQ,CAAC;AAEzF,OAAO,MAAME,QAAQ,GAAGA,CAACC,EAAE,EAAEC,QAAQ,KAAKP,KAAK,CAACI,IAAI,CAACH,aAAa,GAAG,OAAO,EAAE;EAAEO,QAAQ;EAAED;AAAS,CAAC,CAAC;AAGrG,OAAO,MAAME,UAAU,GAAIC,KAAK,IAAKC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;AAGzE,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAMF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;AAE3D,OAAO,MAAMC,iBAAiB,GAAGA,CAACP,QAAQ,EAAEQ,IAAI,KAAK;EACjDC,cAAc,CAACL,OAAO,CAAC,mBAAmB,EAAEJ,QAAQ,CAAC;EACrDS,cAAc,CAACL,OAAO,CAAC,MAAM,EAAEI,IAAI,CAAC;AACxC,CAAC;AAAAE,EAAA,GAHYH,iBAAiB;AAM9B,OAAO,MAAMI,cAAc,GAAGA,CAAA,KAAM;EAChC,MAAMX,QAAQ,GAAGS,cAAc,CAACH,OAAO,CAAC,mBAAmB,CAAC;EAC5D,IAAIN,QAAQ,IAAI,IAAI,EAAE,OAAO,KAAK,CAAC,KAC9B,OAAO,IAAI;AACpB,CAAC;AAGD,OAAO,MAAMY,WAAW,GAAGA,CAAA,KAAM;EAC7B,MAAMZ,QAAQ,GAAGS,cAAc,CAACH,OAAO,CAAC,mBAAmB,CAAC;EAC5D,OAAON,QAAQ;AACnB,CAAC;AAED,OAAO,MAAMa,MAAM,GAAGA,CAAA,KAAM;EAGxBV,YAAY,CAACW,KAAK,CAAC,CAAC;EACpBL,cAAc,CAACK,KAAK,CAAC,CAAC;AAE1B,CAAC;AAGD,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAGzB,IAAIP,IAAI,GAAGC,cAAc,CAACH,OAAO,CAAC,MAAM,CAAC;EAEzC,IAAIE,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,YAAY,EAAE,OAAO,IAAI,CAAC,KACjD,OAAO,KAAK;AAIrB,CAAC;AAAA,IAAAE,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}